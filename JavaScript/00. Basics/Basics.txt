JavaScript is popularized bcz of two paradigms which are extremely important for the evolution of programming:
    1. Prototypal Inheritance (objects without classes, and prototype delegation, aka OLOO — Objects Linking to Other Objects)
    2. Functional Programming (enabled by lambdas with closure)


Hoisting :
    Unlike functions, and other JavaScript declarations, class declarations are not hoisted.
    That means that you must declare a class before you can use it:

Prototype :
    In JavaScript, objects have a special hidden property [[Prototype]] (as named in the specification), that is either null or references 
    another object. That object is called “a prototype”:
    The property [[Prototype]] is internal and hidden, but there are many ways to set it.
    

Types of Inheritance :
    Mainly there are three types of inheritance in JavaScript :
        1. Prototypal Inheritance - Linking of prototypes of a parent object to a child object to share and utilize the properties of a 
                                    parent class using a child class. When we read a property from object, and it’s missing, JavaScript
                                    automatically takes it from the prototype. In programming, this is called “prototypal inheritance”.
        2. Pseudo-classical Inheritance - 
