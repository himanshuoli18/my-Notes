// Objects

Objects can be declared in two ways :-
1. Literals - Not Singleton, multiple instances of an object.
// Implementation :
const obj = {
    name : "Himanshu",                  // By default Babel treats key as string literals i.e. name as "name", age as "age"
    age : 22
}

2. Constructor - Singleton, only one copy of an object.
// Implementation
const obj = Object.create(null)

There are two ways to access keys and value inside an object :-
const obj = {
    name : "Himanshu Oli",
    age : 22,
    comitted : false
}
1. console.log(obj.name)                     // Dot notation is more concise and easier to read.
2. console.log(obj["name"])                  // Bracket notation is more versatile.

Note : One difference between dot notation and bracket notation -
const obj = {
    "full name" : "Himanshu Oli",
    age : 22,
    uid : "21BCS7367"
}
console.log(obj.full name)                 // Cannot access using dot notation
console.log(obj["full name"])              // Correct Way

const StudentDetails = {
    "First Name" : "Himanshu",
    "Last Name" : "Oli",
    age : 22,
    uid : "21BCS7367",
    "Full Name" : function () {
        return this["First Name"]+" "+this["Last Name"]
    }
}
console.log(StudentDetails["First Name"])            // Output : Himanshu
console.log(StudentDetails["Last Name"])             // Output : Oli
console.log(StudentDetails["Full Name"]())           // Output : Himanshu Oli

StudentDetails.eyeColor = "Brown"        // Add a new property in StudentDetails object.

Note : Objects are mutable. They are addressed by reference, not by value.

Note : const x = StudentDetails;  // Will not create a copy of person.
The object x is not a copy of StudentDetails. Both x and StudentDetails refers to the same object.
If we change property of x, it will also change property of StudentDetails.

Note : for...in Loop :
    for (let variable in object) {
        // code to be executed
    }
    const studentDetails = {
        name : "Himanshu Oli",
        age : 22,
        uid : "21BCS7367"
    }
    for (let i in studentDetails) {
        console.log(studentDetails[i]);
    }
    // Output : Himanshu Oli
                22
                21BCS7367

Deleting Properties :
    Two ways of deleting a property inside object -
    1. delete object.propertyName;
    2. delete object["propertyName"];
    Note : The delete operator should not be used on predefined JavaScript object properties. It can crash your application.

Nested Objects :
    const myObj = {
        name : "Himanshu Oli",
        age : 22,
        cars : {
            car1:"Ford",
            car2:"BMW",
            car3:"Jaguar"
        }
    }
    myObj.cars.car3;            // Output : Jaguar
    myObj.cars["car3"];         // Output : Jaguar
    myObj["cars"]["car3"];      // Output : Jaguar
    
Ques : What is this?
Ans :   1. In an object method, this refers to the object.
        2. Alone, this refers to the global object.
        3. In a function, this refers to the global object.
        4. In a function, in strict mode, this is undefined.
        5. In an event, this refers to the element that received the event.
        6. Methods like call(), apply(), and bind() can refer this to any object.




















